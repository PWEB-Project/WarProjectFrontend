name: Build new frontend Docker image and deploy it in cluster. Add new release branch and update release-latest tag.

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Get tag name
      id: get_tag_name
      run: echo ::set-output name=GIT_TAG_NAME::${GITHUB_REF/refs\/tags\//}

    - name: Move to release branch
      run: |
        git config user.name Stefania12
        git config user.email stefania.damian1207@gmail.com
        git checkout -b release-${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}

    - run: echo "VUE_APP_BACKEND_URL=http://backend:8098/api" >> .env
    - run: npm ci || (rm -rf ./node_modules && rm -rf ./package-lock.json && npm install)
    - run: npm run build

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v0.6.0

    - name: Push image to GCR
      uses: RafikFarhad/push-to-gcr-github-action@v4
      with:
        gcloud_service_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
        registry: gcr.io
        project_id: pweb-idp
        image_name: frontend
        image_tag: ${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}
        dockerfile: ./Dockerfile

    - name: Generate Kubernetes manifest file with updated image tag
      uses: 1arp/create-a-file-action@0.2
      with:
        file: 'manifest.yaml'
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            selector:
              app: frontend
            type: ClusterIP
            ports:
              - port: 8080
                targetPort: 8080
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: frontend
            labels:
              app: frontend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: frontend
            template:
              metadata:
                labels:
                  app: frontend
              spec:
                containers:
                - name: frontend
                  image: gcr.io/pweb-idp/frontend:${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}
                  ports:
                  - containerPort: 8080

    - name: Commit and push new manifest file
      run: |
        git add manifest.yaml
        git commit -m "Updated manifest file"
        git push origin release-${{ steps.get_tag_name.outputs.GIT_TAG_NAME}}

    - name: Update release-latest tag
      run: |
        git tag release-latest -f
        git push origin release-latest -f


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Portainer webhook
        run: curl -X POST ${{ secrets.WEBHOOK_URL }}
